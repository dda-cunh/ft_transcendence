x-common-conf: &common
  networks:
    - transcendence
  env_file: ".env"
  restart: on-failure

networks:
  transcendence:
    name: transcendence
    driver: bridge

volumes:
  db_data:
    driver: local
    driver_opts:
      type: none
      device: ${HOME}/data/db
      o: bind

  redis_data:
    driver: local
    driver_opts:
      type: none
      device: ${HOME}/data/redis
      o: bind

  web_data:
    driver: local
    driver_opts:
      type: none
      device: ../web
      o: bind

services:
  postgresql:
    container_name: postgresql
    build: ./postgresql
    volumes:
      - db_data:/var/lib/postgresql/data
    <<: *common

  redis:
    container_name: redis
    build: ./redis
    volumes:
      - redis_data:/data
    <<: *common

  gunicorn-base:
    container_name: gunicorn-base
    build: ./gunicorn-base
    image: gunicorn-base
    depends_on:
      - postgresql
    <<: *common

  auth:
    container_name: auth
    build: ./auth
    depends_on:
      - gunicorn-base
      - redis
    volumes:
      - ./auth/:/service
    <<: *common

  management:
    container_name: management
    build: ./management
    depends_on:
      - gunicorn-base
      - auth
    volumes:
      - ./management/:/service
      - ./auth/user/:/service/user
    <<: *common

  nginx:
    container_name: nginx
    build: ./nginx     
    # volumes:
      # - web_data:/var/www/html
    depends_on:
      - auth
      - game
      - management
    networks:
      - transcendence
  nginx_frontend:
    container_name: nginx_frontend
    build: ./nginx_frontend
    ports:     
      - "80:80"
      - "443:443"  
    volumes:
      - web_data:/var/www/html
    depends_on:
      - nginx
    networks:
      - transcendence

  game:
    container_name: game
    build: ./game
    depends_on:
      - auth
      - redis
    volumes:
      - ./game/:/service
      - ./auth/user/:/service/user
    <<: *common
